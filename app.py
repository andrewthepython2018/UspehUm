# app.py ‚Äî –û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞: –≤—Ö–æ–¥ + —Ç–µ—Å—Ç—ã (junior/senior)
import json
from datetime import datetime, timezone

import streamlit as st
from sheets_backend import Sheets
from tests_core import load_subjects_from_sheet, render_test_form

st.set_page_config(page_title="–û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞ ‚Äî –õ–ö", page_icon="üéì", layout="wide")

# ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ----
SUBJECTS = [
    ("biology", "–ë–∏–æ–ª–æ–≥–∏—è"),
    ("physics", "–§–∏–∑–∏–∫–∞"),
    ("chemistry", "–•–∏–º–∏—è"),
    ("math", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
    ("cs", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"),
]

# ---- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets ----
def _build_sheets():
    # –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º (–±–µ–∑ –∫–ª—é—á–µ–π –∏ —Ç.–ø.)
    spreadsheet_url = st.secrets.get("spreadsheet_url", "")
    sa_info = st.secrets.get("gcp_service_account", {})
    if not spreadsheet_url or not sa_info:
        st.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã: spreadsheet_url –∏/–∏–ª–∏ gcp_service_account.")
        st.stop()
    try:
        return Sheets(spreadsheet_url=spreadsheet_url, sa_info=sa_info)
    except Exception as e:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        st.stop()

if "SHEETS" not in st.session_state:
    st.session_state.SHEETS = _build_sheets()
SHEETS: Sheets = st.session_state.SHEETS

# ---- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ----
def login_view():
    st.title("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    st.subheader("–í—Ö–æ–¥")
    with st.form("login_form"):
        email = st.text_input("Email", placeholder="name@example.com")
        name = st.text_input("–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")

    if not submitted:
        return

    email_norm = (email or "").strip().lower()
    if "@" not in email_norm:
        st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–ø–∏—Å—å (—É–ø—Ä–æ—Å—Ç–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ).
    try:
        user = SHEETS.get_user(email_norm)
    except Exception:
        user = None

    if not user:
        try:
            SHEETS.append_row("users", [email_norm, (name or ""), "student", "TRUE"])
        except Exception:
            # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—É—Å—Ç–∏–º, –Ω–æ –ø–æ–∫–∞–∂–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'users', –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ —ç—Ç–æ–≥–æ.")
        user = {"email": email_norm, "name": name or ""}

    st.session_state["auth"] = {
        "email": email_norm,
        "name": user.get("name") or name or email_norm.split("@")[0],
    }
    st.rerun()

# ---- –î–∞—à–±–æ—Ä–¥ –∏ —Ç–µ—Å—Ç—ã ----
def dashboard_view():
    a = st.session_state.get("auth") or {}
    st.title("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    left, right = st.columns([1, 1])
    with left:
        st.caption(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{a.get('name') or a.get('email')}**")
    with right:
        if st.button("–í—ã–π—Ç–∏", use_container_width=True):
            st.session_state.pop("auth", None)
            st.rerun()

    # –ú–µ—Ç—Ä–∏–∫–∞ ¬´–°–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤¬ª
    try:
        total_results = SHEETS.count_results(a.get("email")) or 0
    except Exception:
        total_results = 0
    st.metric("–°–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤", total_results)

    st.subheader("–í—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    grp_label = st.radio("–ì—Ä—É–ø–ø–∞", ["–ú–ª–∞–¥—à–∞—è", "–°—Ç–∞—Ä—à–∞—è"], horizontal=True)
    group_code = "junior" if grp_label == "–ú–ª–∞–¥—à–∞—è" else "senior"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —É—á—ë—Ç–æ–º –≥—Ä—É–ø–ø—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä—É—Å/–∞–Ω–≥–ª subject/group –∏ –ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    data = load_subjects_from_sheet(SHEETS, group_code)

    tabs = st.tabs([label for _, label in SUBJECTS])
    for i, (code, label) in enumerate(SUBJECTS):
        with tabs[i]:
            questions = data.get(code, [])
            if not questions:
                st.warning("–í–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")
                continue

            st.caption("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.")
            score, total, answers = render_test_form(code, questions)

            # –ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã
            if score is not None and total:
                try:
                    SHEETS.append_row(
                        "results",
                        [
                            datetime.now(timezone.utc).isoformat(),
                            a["email"],
                            code,
                            score,
                            total,
                            json.dumps(answers, ensure_ascii=False),
                        ],
                    )
                except Exception:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                else:
                    st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {score} / {total}")

# ---- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----
def main():
    if not st.session_state.get("auth"):
        login_view()
    else:
        dashboard_view()

if __name__ == "__main__":
    main()
