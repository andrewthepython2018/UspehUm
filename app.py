import json
from datetime import datetime, timezone
from typing import Dict, List

import streamlit as st

from sheets_backend import Sheets
from tests_core import load_subjects_from_sheet, render_test_form

st.set_page_config(page_title=st.secrets.get("app_title", "–û–Ω–ª–∞–π–Ω‚Äë—à–∫–æ–ª–∞"), page_icon="üìö", layout="wide")

# ‚îÄ‚îÄ –°—Ç–∏–ª–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –≤–∏–¥)
CUSTOM_CSS = """
<style>
.main .block-container{max-width:1100px}
.kpi-card{border-radius:16px; padding:16px; box-shadow:0 2px 10px rgba(0,0,0,.06);}
.small{opacity:.8; font-size:0.9rem}
.fullwidth > div[data-baseweb="select"]{width:100%}
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

# ‚îÄ‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sheets –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ debug –∏ —Å–∞–π–¥–±–∞—Ä–∞)
sa = st.secrets.get("gcp_service_account")
url = st.secrets.get("spreadsheet_url")
if not sa or not url:
    st.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–µ–∫—Ä–µ—Ç—ã: gcp_service_account –∏/–∏–ª–∏ spreadsheet_url.")
    with st.expander("–ö–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?"):
        st.markdown(
            """
1. –í Streamlit Cloud ‚Üí **Manage app ‚Üí Settings ‚Üí Secrets** –≤—Å—Ç–∞–≤—å—Ç–µ:
```toml
spreadsheet_url = "https://docs.google.com/spreadsheets/d/XXXXXXXXXXXX/edit"

[gcp_service_account]
type = "service_account"
project_id = "..."
private_key_id = "..."
private_key = "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
client_email = "SERVICE-ACCOUNT@PROJECT.iam.gserviceaccount.com"
client_id = "..."
auth_uri = "https://accounts.google.com/o/oauth2/auth"
token_uri = "https://oauth2.googleapis.com/token"
auth_provider_x509_cert_url = "https://www.googleapis.com/oauth2/v1/certs"
client_x509_cert_url = "https://www.googleapis.com/robot/v1/metadata/x509/..."
```
2. –î–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø **Editor** –∫ Google Sheet –¥–ª—è `client_email`.
3. –ù–∞–∂–º–∏—Ç–µ **Reboot app**.
"""
        )
    st.stop()

try:
    SHEETS = Sheets(spreadsheet_url=url, sa_info=sa)
except Exception:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∏ URL).")
    st.stop()

# ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
if "auth" not in st.session_state:
    st.session_state.auth = {"ok": False, "email": None, "name": None, "role": None}

# ‚îÄ‚îÄ –•–µ–¥–µ—Ä
col1, col2 = st.columns([1, 2])
with col1:
    st.markdown("### üìö –û–Ω–ª–∞–π–Ω‚Äë—à–∫–æ–ª–∞ ‚Äî –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
with col2:
    st.caption("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–µ–±‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Streamlit. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google Sheets ¬∑ –¢–µ—Å—Ç—ã –ø–æ –±–∏–æ–ª–æ–≥–∏–∏, —Ñ–∏–∑–∏–∫–µ, —Ö–∏–º–∏–∏, –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ.")

# ‚îÄ‚îÄ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞

def login_view():
    st.subheader("–í—Ö–æ–¥")
    with st.form("login_form", clear_on_submit=False):
        email = st.text_input("Email", placeholder="you@example.com")
        submit = st.form_submit_button("–í–æ–π—Ç–∏")

    if submit:
        user = SHEETS.get_user(email.strip().lower())
        if user and str(user.get("active")).upper() == "TRUE":
            st.session_state.auth = {
                "ok": True,
                "email": user.get("email"),
                "name": user.get("name", "–£—á–µ–Ω–∏–∫"),
                "role": user.get("role", "stu"),
            }
            st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.auth['name']}!")
            try:
                st.rerun()
            except AttributeError:
                st.experimental_rerun()
            return
        else:
            st.error("–î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É.")
            if st.secrets.get("allow_signup", False):
                st.info("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É ‚Äî –º—ã –¥–æ–±–∞–≤–∏–º –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                with st.form("signup"):
                    name = st.text_input("–í–∞—à–µ –∏–º—è")
                    email2 = st.text_input("–í–∞—à email")
                    req = st.text_area("–ö—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ/–∫–ª–∞—Å—Å/–≥–æ—Ä–æ–¥")
                    send = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
                if send:
                    SHEETS.append_row("signup", [datetime.now(timezone.utc).isoformat(), name, email2, req])
                    st.success("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ email.")

# ‚îÄ‚îÄ –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞

def dashboard_view():
    a = st.session_state.auth
    st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {a['name']} ({a['email']})")

    # –ö–∞—Ä—Ç–æ—á–∫–∏
    colA, colB, colC = st.columns(3)
    with colA:
        st.markdown("<div class='kpi-card'><b>–°—Ç–∞—Ç—É—Å</b><br><span class='small'>–í—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã</span></div>", unsafe_allow_html=True)
    with colB:
        total_results = SHEETS.count_results(a["email"]) or 0
        st.markdown(f"<div class='kpi-card'><b>–°–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤</b><br><span class='small'>{total_results}</span></div>", unsafe_allow_html=True)
    with colC:
        st.markdown("<div class='kpi-card'><b>–î–æ–º–∞—à–∫–∏</b><br><span class='small'>–°–∫–æ—Ä–æ</span></div>", unsafe_allow_html=True)

    st.divider()
    st.subheader("–í—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã")

    subjects = [
        ("biology", "üß¨ –ë–∏–æ–ª–æ–≥–∏—è"),
        ("physics", "üß≤ –§–∏–∑–∏–∫–∞"),
        ("chemistry", "‚öóÔ∏è –•–∏–º–∏—è"),
        ("math", "‚ûó –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"),
        ("cs", "üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"),
    ]

    data = load_subjects_from_sheet(SHEETS)

    tabs = st.tabs([label for _, label in subjects])

    for i, (code, label) in enumerate(subjects):
        with tabs[i]:
            questions = data.get(code, [])
            if not questions:
                st.warning("–í–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –û—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—Å—Ç tests –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ.")
                continue
            st.caption("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å\".")
            score, total, answers = render_test_form(code, questions)
            if score is not None:
                # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                SHEETS.append_row(
                    "results",
                    [
                        datetime.now(timezone.utc).isoformat(),
                        a["email"],
                        code,
                        score,
                        total,
                        json.dumps(answers, ensure_ascii=False),
                    ],
                )
                st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {score} / {total}")

# ‚îÄ‚îÄ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
if not st.session_state.auth["ok"]:
    login_view()
else:
    dashboard_view()
